/*
* Ensures that all File Stages must use variables for determining paths
*
* Rationale:
* Developers occasionally hard code file paths while debugging or developing.  
* These will cause job failures when deploying to a different project or server.
*
* This problem is usually solved by using a project specific variable to define the base
* path for file based stages such as datasets.  This compliance rule will identify hard 
* coded file paths by checking that the pathname includes at least one predefined path parameter.
*
* The predefined path parameters and the stages for which they can be used with can be customized
* by modifying the "pathParameters" variable.
*/

// stage to file property mapping
def stageProperties = [
    'PxDataSet'                     :[ names: ['dataset'] ],
    'PxFileSet'                     :[ names: ['fileset'] ],
    'PxCFF'                         :[ names: ['filename'] ],
    'FileConnectorPX'               :[ names: ['XMLProperties'], query: 'Usage.FilenameSource' ],
    'PxLookupFileSet'               :[ names: ['fileset'] ],
    'UnstructuredDataConnectorPX'   :[ names: ['XMLProperties'], query: 'Usage.FileName' ]
]

def getSequentialFilePaths(stage) {
    // Map value in 'selection' property to property to check for filepath
    def selectionMap = [
        'file'    : 'file +',
        'pattern' : 'filepattern'
    ]

    // Check if stage has an output or input link (i.e. is it a source or target)...
    if (stage?.out?.pin) {
        // This dertermines which property to check for file path
        def selection = stage?.out?.pin?.selection.next()

        // Get file path based on selection
        def fileProp = selectionMap[selection.toString()]

        return stage?.out?.pin?.property(fileProp).next().toString()
    } else {
        // This dertermines which property to check for file path
        def writemethod = stage?.in?.pin?.writemethod.next()

        // Get file path based on writemethod
        if (writemethod.toString() == " ") {
            return stage?.in?.pin?.property("file").next().toString()
        }

        if (writemethod.toString() == "filepattern") {
            // If writemethod is 'filepattern', it may have a sub-property 'filepath'
            def filepath = stage.in.pin.writemethod.next().filepath
            if (filepath) return filepath.toString()

            return null
        }
    }
}

item.graph.V.stage.comply{"${config.readableStageTypes[it.stageType] ?: it.stageType} '${it.stageName}' uses hardcoded path '${it.hardcodedPath}'. "} { stage ->

    // build all paths associated with this stage
    // (Don't think there ever be multiple paths...?)
    def paths = []

    // get the properties for this stage type
    switch (stage.stageType) {
        case 'PxSequentialFile':
            def path = getSequentialFilePaths(stage)
            if (path) paths.add(path)
            break
        
        default:
            def property = stageProperties[stage.stageType]

            if (!property) return true
                
            property.names.each { propertyName->
                // get the paths from the stage
                if (stage[propertyName] != null) {
                    paths.add(stage[propertyName])
                }

                // get paths from input/output pins
                stage.in.pin.property(propertyName).fill(paths)
                stage.out.pin.property(propertyName).fill(paths)
            }
            
            // flatten any sub arrays
            paths = paths.flatten()

            // turn path properties into strings considering any property hierarchy queries
            paths = paths.findResults{ path->
            
                if (property.query) {
                    // evaluate the path using supplied query
                    path = Eval.x(path, "x.${property.query}").toString()
                } else {
                    path = path?.toString()
                }

                // filter blank strings which occur when query does not match the property hierarchy
                return path?path.trim():null
            }

            break
    }

    // ensure every path contains a parameter
    // Note: there may still be hardcoded sections of the path.
    //       This ensures that at least part of the path is parameterised.
    return paths.every { path ->
        if (!path) true

        if (path.matches(".*#.*#.*")) {
            true
        } else {
            stage.hardcodedPath = path
            false
        }
    }
}

