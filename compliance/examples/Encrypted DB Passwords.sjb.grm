/*
* Ensures that all Connectors and Stages must use encrypted Passwords
*
* Rationale:
* Unencrypted passwords are a security risk and should be avoided.
* 
* This one is a bit complicated, because there are a couple of factors to consider:
* Some Stages have their passwords as clear text
* Some are encrypted and the value is always stored as encrypted, so we can't tell whether they are hardcoded or using parameters.
* Connector password fields are encrypted, but store parameter names as clear text. The parameter itself may or may not be encrypted.
*
* The one caveat on this rule is that the ISX stores parametersets separately to jobs, so if a Password field refers to a parameter inside a parameterset,
* that parameter may be unencrypted and we won't know.
* That said, the password won't be stored in the ISX for the job. 
*/


// stage to property mapping
def stageProperties = [
    'DB2Connector'                  : [[alias: 'Password', name: 'XMLProperties:Connection.Password'], 
                                       [alias: 'Alternate Conductor Password', name: 'XMLProperties:Connection.Conductor.Password'] ],
    'DSDB2'                         : [[alias: 'Password', name: 'PASSWORD'] ],
    'UDBLoad'                       : [[alias: 'Password', name: 'PASSWORD'] ],
    'BCPLOAD'                       : [[alias: 'Password', name: 'Password'] ],
    'CUDT6Stage'                    : [[alias: 'Password', name: 'Password'] ],
    'CUniDataStage'                 : [[alias: 'Password', name: 'Password'] ],
    'CUVStage'                      : [[alias: 'Password', name: 'Password'] ],
    'ftp'                           : [[alias: 'User Password', name: 'PASSWORD'] ],
    'DRSConnector'                  : [[alias: 'Password', name: 'XMLProperties:Connection.PASSWORD'] ],
    'DRS'                           : [[alias: 'Password', name: 'PASSWORD'] ],
    'CODBCStage'                    : [[alias: 'Password', name: 'password'] ],
    'InfmxCLI'                      : [[alias: 'Password', name: 'PASSWORD'] ],
    'IQBulk12'                      : [[alias: 'IQ Password', name: 'PASSWORD'] ],
    'NetezzaConnector'              : [[alias: 'Password', name: 'XMLProperties:Connection.Password'], 
                                       [alias: 'PasswordTWT', name: 'XMLProperties:Connection.UseSeparateConnectionForTWT.Password'] ],
    'ODBCConnector'                 : [[alias: 'Password', name: 'XMLProperties:Connection.Password'] ],
    'ORAApps'                       : [[alias: 'Password', name: 'PASSWORD'],
                                       [alias: 'Password', name: 'LKPASSWORD'] ],
    'OracleConnector'               : [[alias: 'Password', name: 'XMLProperties:Connection.Password'] ],
    'orahrchy'                      : [[alias: 'Oracle DSN Password', name: 'PASSWORD'] ],
    'ORAOCI9'                       : [[alias: 'Password', name: 'PASSWORD'] ],
    'ORAOCIBL'                      : [[alias: 'Password', name: 'PASSWORD'] ],
    'PeoplesoftOne'                 : [[alias: 'System DSN Password', name: 'PASSWORD'],
                                       [alias: 'System DSN Password', name: 'PASSWORDF0005'],
                                       [alias: 'System DSN Password', name: 'PASSWORDF9210'],
                                       [alias: 'System DSN Password', name: 'PASSWORDF9860'],
                                       [alias: 'System DSN Password', name: 'PASSWORDF98611'],
                                       [alias: 'System DSN Password', name: 'PASSWORDF98711'],
                                       [alias: 'Password', name: 'LKPASSWORD'] ],
    'PS_HRY'                        : [[alias: 'ODBC DSN Password', name: 'PASSWORD'] ],
    'rdbload'                       : [[alias: 'Password', name: 'Password'] ],
    'Siebel_BC'                     : [[alias: 'Siebel DSN Password', name: 'PASSWORD'],
                                        [alias: 'Password', name: 'LKPASSWORD'] ],
    'Siebel_DA'                     : [[alias: 'Siebel DSN Password', name: 'PASSWORD'],
                                        [alias: 'Password', name: 'LKPASSWORD'] ],
    'Siebel_EIM'                    : [[alias: 'ODBC Password', name: 'ODBCPassWord'],
                                        [alias: 'ODBC Password for metadata access', name: 'ODBCClientPassWord'],
                                        [alias: 'Siebel Password', name: 'PassWord'] ],
    'STP'                           : [[alias: 'Password', name: 'PASSWORD'] ],
    'SYBASEOC'                      : [[alias: 'Password', name: 'PASSWORD'], ],
    'TDMLoad'                       : [[alias: 'Password', name: 'PASSWORD'] ],
    'Terabulk'                      : [[alias: 'Password', name: 'PASSWORD'] ],
    'Teradata'                      : [[alias: 'Password', name: 'PASSWORD'] ], 
    'TeradataConnector'             : [[alias: 'Password', name: 'XMLProperties:Connection.Password'] ],
    'WebSphereMQConnector'          : [[alias: 'Password', name: 'XMLProperties:Connection.Password'] ],
    'WSClient'                      : [[alias: 'Basic authentication password', name: 'authentication_password'],
                                       [alias: 'Proxy password', name: 'proxy_password'] ],
    'WSTransformer'                 : [[alias: 'Basic authentication password', name: 'authentication_password'],
                                       [alias: 'Proxy password', name: 'proxy_password'] ],
    'XPSLoad'                       : [[alias: 'Password', name: 'PASSWORD'] ]
]

// Take a list of the encrypted parameters included in the Job
// If a password field refers to a parameter, it needs to be in this list
encryptedParameters = []
item.parameters.each { paramName, param ->
    if (param.type == "EncryptedString") {
        encryptedParameters.add("#" + param.name + "#")
    }
}

item.graph.V.stage.sideEffect{ stage ->

    // the properties for this stage type
    def properties = stageProperties[stage.stageType]
	    
	if (properties) {        
        // find path[s] associated with this property
        
        properties.each { property ->
            def paths = []

            if (property.name.contains("XMLProperties:")) {
                def xmlProp = property.name.drop("XMLProperties:".length())
                path = Eval.x(stage["XMLProperties"], "x.${xmlProp}")

                if (path != null) {
                    paths.add(path)
                }
            } else {
                // get the paths from the stage
                if (stage[property.name] != null) {
                    paths.add(stage[property.name])
                }

                // get paths from input/output pins
                stage.in.pin.property(property.name).fill(paths)
                stage.out.pin.property(property.name).fill(paths)
            }
            // flatten any sub arrays
            paths = paths.flatten()

            // Encrypted. It's either hardcoded and encrypted or an encrypted reference to a parameter[set], depending on the stage. Irrelevant either way 
            if (property.alias.matches('(?i).*password.*')) {
                paths.removeAll { it.toString().matches('^([{]iisenc[}]|HD[:]).*') }
            }

            // turn path properties into strings considering any property hierarchy queries
            paths.removeAll { it == null || it.toString().isEmpty() } //empty fields
            paths.removeAll { it.toString().matches('^#[a-zA-Z0-9][A-Za-z0-9|_]*?[.]([$])?[a-zA-Z0-9][A-Za-z0-9|_]*#$') } // drop references to parametersets, which we can't verify

            paths.removeAll { it.toString().matches('^#([$])?[a-zA-Z0-9][A-Za-z0-9|_]*#$') && encryptedParameters.contains(it.toString()) } // drop references to parameters in the list of encrypted

            if (paths.size() > 0) {
                compliance.failure("${config.readableStageTypes[stage.stageType] ?: stage.stageType} '${stage.stageName}' contains unencrypted ${property.alias} value '${paths}'.")
                
            }
        }
    }
}