/*
* Ensures that all Database Connectors and Stages must use variables for location and credentials
*
* Rationale:
* Developers occasionally hard code database credentials into their jobs.  
* These will cause job failures when deploying to a different project or server.
*
* NOTE: A number of stages have the password fields commented out.
This is because there is no way of selecting the parameter through the UI, leaving the user to type a parameter name which is then encrypted. 
Because the ISX merely contains the encrypted string, the rule would always report a failure, even if the user has entered a valid parameter.
*/


// stage to file property mapping

def stageProperties = [
    'DB2Connector'                  : [[alias: 'Database/Location', name: 'XMLProperties:Connection.Database'], 
                                      [alias: 'User name', name: 'XMLProperties:Connection.Username'], 
                                      [alias: 'Password', name: 'XMLProperties:Connection.Password'], 
                                      [alias: 'Instance', name: 'XMLProperties:Connection.Instance'], 
                                      [alias: 'Alternate Conductor Instance', name: 'XMLProperties:Connection.Conductor.Instance'], 
                                      [alias: 'Alternate Conductor Database/Location', name: 'XMLProperties:Connection.Conductor.Database'], 
                                      [alias: 'Alternate Conductor User name', name: 'XMLProperties:Connection.Conductor.Username'], 
                                      [alias: 'Alternate Conductor Password', name: 'XMLProperties:Connection.Conductor.Password'] ],
    'DSDB2'                         : [[alias: 'User Name', name: 'USERNAME'],
//                                      [alias: 'Password', name: 'PASSWORD'], 
                                      [alias: 'Server Name', name: 'SERVER'] ],
    'UDBLoad'                       : [[alias: 'User Name', name: 'USERNAME'],
//                                      [alias: 'Password', name: 'PASSWORD'], 
                                      [alias: 'Database Name', name: 'DBNAME'] ],
    'DRSConnector'                  : [[alias: 'Connection string', name: 'XMLProperties:Connection.DATABASE'], 
                                      [alias: 'Username', name: 'XMLProperties:Connection.USERID'], 
                                      [alias: 'Password', name: 'XMLProperties:Connection.PASSWORD'] ],
    'DRS'                           : [[alias: 'User Id', name: 'USERID'],
//                                      [alias: 'Password', name: 'PASSWORD'], 
                                      [alias: 'Database Source', name: 'DATABASE'] ],
    'InfmxCLI'                      : [[alias: 'Data Source Name', name: 'DATASOURCE'], 
//                                      [alias: 'Password', name: 'PASSWORD'], 
                                      [alias: 'User Name', name: 'USERNAME'] ],
    'INFBLK10'                      : [[alias: 'Database Name', name: 'DATABASE'], 
                                      [alias: 'Server Name', name: 'SERVER'] ],
    'XPSLoad'                       : [[alias: 'Server Name', name: 'SERVER'],
                                      [alias: 'Database Name', name: 'DATABASE'], 
//                                      [alias: 'Password', name: 'PASSWORD'],
                                      [alias: 'User Name', name: 'USERNAME'] ],
    'NetezzaConnector'              : [[alias: 'Database', name: 'XMLProperties:Connection.Database'], 
                                      [alias: 'User name', name: 'XMLProperties:Connection.Username'], 
                                      [alias: 'Password', name: 'XMLProperties:Connection.Password'], 
                                      [alias: 'Data source', name: 'XMLProperties:Connection.DataSource'], 
                                      [alias: 'DatabaseTWT', name: 'XMLProperties:Connection.UseSeparateConnectionForTWT.Database'], 
                                      [alias: 'UsernameTWT', name: 'XMLProperties:Connection.UseSeparateConnectionForTWT.Username'], 
                                      [alias: 'PasswordTWT', name: 'XMLProperties:Connection.UseSeparateConnectionForTWT.Password'] ],
    'CODBCStage'                    : [[alias: 'Data source name', name: 'DSN'], 
//                                      [alias: 'Password', name: 'Password'], 
                                      [alias: 'User name', name: 'UserName'] ],
    'ODBCConnector'                 : [[alias: 'Data source', name: 'XMLProperties:Connection.DataSource'], 
                                      [alias: 'Username', name: 'XMLProperties:Connection.Username'], 
                                      [alias: 'Password', name: 'XMLProperties:Connection.Password'] ],
    'OracleConnector'               : [[alias: 'Server', name: 'XMLProperties:Connection.Server'], 
                                      [alias: 'User name', name: 'XMLProperties:Connection.Username'], 
                                      [alias: 'Password', name: 'XMLProperties:Connection.Password'], 
                                      [alias: 'RACName', name: 'XMLProperties:Connection.RACName'] ],
    'ORAOCI9'                       : [[alias: 'Database Source', name: 'DATABASE'], 
//                                      [alias: 'Password', name: 'PASSWORD'], 
                                      [alias: 'User Id', name: 'USERID'] ],
    'ORAOCIBL'                      : [[alias: 'Service Name', name: 'SERVICENAME'], 
//                                      [alias: 'Password', name: 'PASSWORD'],
                                      [alias: 'User name', name: 'USERID'] ], 
    'rdbload'                       : [[alias: 'Database Name', name: 'Database'], 
//                                      [alias: 'Password', name: 'Password'], 
                                      [alias: 'User ID', name: 'UserID'] ],
    'STP'                           : [[alias: 'Data source', name: 'DATASRC'], 
                                      [alias: 'User name', name: 'USERID'], 
//                                      [alias: 'Password', name: 'PASSWORD'],    // Can't check this because you can't select a parameter, and typing one in looks like normal encrypted text
                                      [alias: 'Database name', name: 'DATABASE'] ],
    'BCPLOAD'                       : [[alias: 'SQL-Server Name', name: 'ServerName'],
                                      [alias: 'Database Name', name: 'Database'], 
//                                      [alias: 'Password', name: 'Password'],
                                      [alias: 'User Name', name: 'UserID'] ],
    'IQBulk12'                      : [[alias: 'IQ Server/Datasource Name', name: 'SERVER'],
                                      [alias: 'IQ Database Name', name: 'DATABASE'], 
//                                      [alias: 'IQ Password', name: 'PASSWORD'],
                                      [alias: 'IQ User ID', name: 'USERID'] ],
    'SYBASEOC'                      : [[alias: 'Server', name: 'SERVER'], 
                                      [alias: 'User Name', name: 'USERNAME'], 
//                                      [alias: 'Password', name: 'PASSWORD'],    // Can't check this because you can't select a parameter, and typing one in looks like normal encrypted text
                                      [alias: 'Database', name: 'DATABASE'] ],
    'Teradata'                      : [[alias: 'Teradata Director', name: 'DATASOURCE'], 
                                      [alias: 'Account ID', name: 'ACCTID'], 
//                                      [alias: 'Password', name: 'PASSWORD'], 
                                      [alias: 'User Name', name: 'USERNAME'] ],
    'TeradataConnector'             : [[alias: 'Server', name: 'XMLProperties:Connection.Server'], 
                                      [alias: 'User name', name: 'XMLProperties:Connection.Username'], 
                                      [alias: 'Password', name: 'XMLProperties:Connection.Password'], 
                                      [alias: 'Account', name: 'XMLProperties:Connection.Account'], 
                                      [alias: 'Database', name: 'XMLProperties:Connection.Database'] ],
    'TDMLoad'                       : [[alias: 'Server', name: 'SERVER'], 
                                      [alias: 'User name', name: 'USERNAME'], 
//                                      [alias: 'Password', name: 'PASSWORD'], 
                                      [alias: 'Database', name: 'DATABSE'], 
                                      [alias: 'Account', name: 'ACCTNAME'] ],
    'Terabulk'                      : [[alias: 'Server', name: 'SERVER'], 
                                      [alias: 'User name', name: 'USERNAME'], 
//                                      [alias: 'Password', name: 'PASSWORD'], 
                                      [alias: 'Database', name: 'DATABASE'], 
                                      [alias: 'Account', name: 'ACCTNAME'] ],
    'CUniDataStage'                 : [[alias: 'Server and/or Database', name: 'DSN'],   // This one is special. Stores the Server and Database separated by a '>'.
//                                      [alias: 'Password', name: 'Password'], 
                                      [alias: 'User name', name: 'UserName'] ],
    'CUvStage'                      : [[alias: 'Directory Path', name: 'Directory'], 
                                      [alias: 'User name', name: 'UserName'], 
//                                      [alias: 'Password', name: 'Password'], 
                                      [alias: 'Account name', name: 'Account'], 
                                      [alias: 'Data source name', name: 'DSN'] ]
]


item.graph.V.stage.sideEffect{ stage ->

    // the properties for this stage type
    def properties = stageProperties[stage.stageType]
	    
	if (properties) {        
        // find path[s] associated with this property
        
        properties.each { property ->
            def paths = []

            if (property.name.contains("XMLProperties:")) {
                def xmlProp = property.name.drop("XMLProperties:".length())
                path = Eval.x(stage["XMLProperties"], "x.${xmlProp}")

                if (path != null) {
                    paths.add(path)
                }
            } else {
                // get the paths from the stage
                if (stage[property.name] != null) {
                    paths.add(stage[property.name])
                }

                // get paths from input/output pins
                stage.in.pin.property(property.name).fill(paths)
                stage.out.pin.property(property.name).fill(paths)
            }
            // flatten any sub arrays
            paths = paths.flatten()

            // turn path properties into strings considering any property hierarchy queries
            paths.removeAll { it == null || it.toString().isEmpty() }

            if (property.name == 'DSN' && stage.stageType == 'CUniDataStage') {
                paths.removeAll { it.toString().matches('^#([a-zA-Z0-9][A-Za-z0-9|_]*[.])?([$])?[a-zA-Z0-9][A-Za-z0-9|_]*#[>]#(([a-zA-Z0-9][A-Za-z0-9|_]*[.])|[$])?[a-zA-Z0-9][A-Za-z0-9|_]*#$') }
            } else {
                paths.removeAll { it.toString().matches('^#([a-zA-Z0-9][A-Za-z0-9|_]*[.])?([$])?[a-zA-Z0-9][A-Za-z0-9_]*#$') }
            }

            if (paths.size() > 0) {
                compliance.failure("${config.readableStageTypes[stage.stageType] ?: stage.stageType} '${stage.stageName}' contains a hard-coded ${property.alias} value '${paths}'.")
            }
        }
    }
}
